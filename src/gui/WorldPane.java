package gui;

import world.viewport.NormalWorldViewport;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import world.defined.RandomWorld;
import world.World;
import world.WorldListener;
import world.viewport.AddWorldViewport;

/**
 *
 * @author Ahmed Alshakh <ahmed.s.alshakh@gmail.com>
 */
public class WorldPane extends javax.swing.JPanel implements WorldListener {

    private Viewport currentViewport;
    private final NormalWorldViewport myNormalViewport;
    private final AddWorldViewport myAddViewport;
    private World mainWorld;

    public WorldPane() { // Just for showing a default picture in IDE.
        this(new RandomWorld(100));
    }

    /**
     * Creates new form WorldPane
     *
     * @param mainWorld
     */
    public WorldPane(World mainWorld) {
        mainWorld.attachListener(this);
        this.mainWorld = mainWorld;
        //
        this.myNormalViewport = new NormalWorldViewport(this, mainWorld);
        this.myAddViewport = new AddWorldViewport(this, mainWorld);
        currentViewport = myNormalViewport;
        //
        WorldPaneMouseAdapter ma = new WorldPaneMouseAdapter(this);
        addMouseListener(ma);
        addMouseWheelListener(ma);
        addMouseMotionListener(ma);
        addKeyListener(ma);
    }

    @Override
    public void paintComponent(Graphics g) {
        currentViewport.setPortSize(this.getSize());
        currentViewport.paintView(g);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
                this.setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 400, Short.MAX_VALUE)
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 300, Short.MAX_VALUE)
                );
        }// </editor-fold>//GEN-END:initComponents

        // Variables declaration - do not modify//GEN-BEGIN:variables
        // End of variables declaration//GEN-END:variables
    @Override
    public void worldStepped() {
        this.repaint();
    }

    @Override
    public void worldToggled() {
        this.repaint();
    }

    public void addWorld(World newWorld) throws AddWorldViewport.TooBigWorld {
        syncViewports();
        currentViewport = myAddViewport;
        myAddViewport.AddWorld(newWorld);
        repaint();
    }

    public void toNormal() {
        syncViewports();
        myAddViewport.noAddWorld();
        currentViewport = myNormalViewport;
        repaint();
    }

    private void syncViewports() {
        Point currentOffset = currentViewport.getOffset();
        myAddViewport.getOffset().x = currentOffset.x;
        myAddViewport.getOffset().y = currentOffset.y;
        myNormalViewport.getOffset().x = currentOffset.x;
        myNormalViewport.getOffset().y = currentOffset.y;
        //
        final int cellSize = currentViewport.getCellSize();
        myAddViewport.setCellSize(cellSize);
        myNormalViewport.setCellSize(cellSize);
    }

    class WorldPaneMouseAdapter extends MouseAdapter implements KeyListener {

        Point oldPos = null;
        WorldPane myPane;

        public WorldPaneMouseAdapter(WorldPane pane) {
            myPane = pane;
        }

        @Override
        public void mouseClicked(MouseEvent me) {
            boolean button;
            if (me.getButton() == MouseEvent.BUTTON3) {
                button = Viewport.RIGHT_BUTTON;
            } else if (me.getButton() == MouseEvent.BUTTON1) {
                button = Viewport.LEFT_BUTTON;
            } else {
                return; // other buttons are not allowed
            }
            currentViewport.clicked(me.getPoint(), button);

            myPane.repaint();
        }

        @Override
        public void mouseDragged(MouseEvent me) {
            if (oldPos == null) {
                oldPos = me.getPoint();
            } else {
                Point newPos = me.getPoint();

                currentViewport.dragged(oldPos, me.getPoint());
                oldPos = me.getPoint();
            }
            myPane.repaint();
        }

        @Override
        public void mouseWheelMoved(MouseWheelEvent me) {
            boolean direction;
            if (me.getWheelRotation() < 0) {
                direction = Viewport.WHEEL_DOWN;
            } else {
                direction = Viewport.WHEEL_UP;
            }
            currentViewport.wheeled(me.getPoint(), me.getScrollAmount(), direction);
            myPane.repaint();
        }

        @Override
        public void mouseReleased(MouseEvent me) {
            oldPos = null; // without this, two separate mouseDrags will be one and weird behaviour will happen.
        }

        @Override
        public void keyTyped(KeyEvent e) {
            currentViewport.keyTyped(e.getKeyChar());
            myPane.repaint();
        }

        @Override
        public void keyPressed(KeyEvent e) {
            currentViewport.keyPressed(e.getKeyCode());
            myPane.repaint();
        }

        @Override
        public void keyReleased(KeyEvent e) {
            currentViewport.keyReleased(e.getKeyCode());
            myPane.repaint();
        }
    }
}
